// Mocks generated by Mockito 5.4.4 from annotations
// in we_shop/test/features/home_products/presentation/bloc/most_use_products_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:we_shop/core/failure/failure.dart' as _i6;
import 'package:we_shop/features/home_products/domain/entities/Product.dart'
    as _i7;
import 'package:we_shop/features/home_products/domain/repos/products_repository.dart'
    as _i2;
import 'package:we_shop/features/home_products/domain/use_cases/get_single_products_list/get_most_used_products_use_case.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProductsRepository_0 extends _i1.SmartFake
    implements _i2.ProductsRepository {
  _FakeProductsRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetMostUsedProductsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMostUsedProductsUseCase extends _i1.Mock
    implements _i4.GetMostUsedProductsUseCase {
  MockGetMostUsedProductsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductsRepository get productsRepository => (super.noSuchMethod(
        Invocation.getter(#productsRepository),
        returnValue: _FakeProductsRepository_0(
          this,
          Invocation.getter(#productsRepository),
        ),
      ) as _i2.ProductsRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Product>>> execute(
          [int? offset]) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [offset],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.Product>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.Product>>(
          this,
          Invocation.method(
            #execute,
            [offset],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.Product>>>);
}
